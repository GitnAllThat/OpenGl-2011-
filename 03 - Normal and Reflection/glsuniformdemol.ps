#version 150



in vec3 normal_PS;
in vec2 tcoord_PS;
in vec3 rawPos_PS;
in vec3 rawNormal_PS;
in vec3 rawTangent_PS;
in vec3 rawBinormal_PS;



out vec4 pixelColour;



uniform mat4 worldMatrix;
uniform mat4 viewMatrix;
uniform mat4 projMatrix;
uniform vec3 camPos;


uniform float environmentBlend;
uniform int normalToggle;


uniform sampler2D mytexture;
uniform sampler2D specMap;
uniform sampler2D normalMap;
uniform samplerCube cubeMap;


uniform int drawingSkybox;







////////////////////
//// Light Info ////
////////////////////

	uniform vec3 ambientLight;

	struct DirectLight
	{
		vec3 direction;
		vec3 colour;
	};	

	uniform float directLightsCount;				//Number of directlights being used
	uniform DirectLight[5] directLights;


	struct PointLight
	{
		vec3 position;
		vec3 colour;
	};	

	uniform float pointLightsCount;					//Number of pointlights being used
	uniform PointLight[5] pointLights;

	const int NODIRECTLIGHTS = 5;
	const int NOPOINTLIGHTS = 5;

////////////////////
//// Light Info ////
////////////////////










void main( )
{
	if(drawingSkybox !=0)
	{
		vec4 VertexPosition = worldMatrix * vec4(rawPos_PS,1);
		vec3 TextureCoordinate = VertexPosition.xyz - camPos;
	
	
		pixelColour = texture(cubeMap, normalize(TextureCoordinate));
	}
	else
	{
	
	
		vec3 textureColour = texelFetch(mytexture, ivec2(tcoord_PS ), 0).rgb;												//Gets the texture colour 
		vec3 specIntensity = texelFetch(specMap, ivec2(tcoord_PS ), 0).rgb;													//Gets the texture specular coef
		vec3 normal_MapValue = normalize(1.5 * (texelFetch(normalMap, ivec2(tcoord_PS ), 0).rgb - (0.5, 0.5, 0.5)));		//Gets the normal;	

		
		

		vec4 worldTangent =  normalize(worldMatrix * vec4(rawTangent_PS,0));
		vec4 worldBinormal =  normalize(worldMatrix * vec4(rawBinormal_PS,0));
		vec4 worldNormal =  normalize(worldMatrix * vec4(rawNormal_PS,0));




		normal_MapValue = normalize(normal_PS.xyz + (normal_MapValue.x * worldTangent.xyz + normal_MapValue.y * worldBinormal.xyz  ));


		if(normalToggle == 0)	normal_MapValue = normal_PS.xyz;											//Toggle Using the normal map		










		
		//////////////////
		//// Lighting ////
		//////////////////

			float lightIntensity;
			vec3 diffuseLighting = vec3(0,0,0);
			vec3 specular = vec3(0,0,0);
			vec4 direction;		
			/////////////////////////////////////////////////////////////////////////////////
			/////////////////////////////// Direct Light Code ///////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////

				for(int i = 0; i < NODIRECTLIGHTS; ++i)
				{
					if( i >= directLightsCount ) break;
					lightIntensity = clamp((dot(normal_MapValue, normalize(directLights[i].direction))), 0, 1);	
					diffuseLighting += (directLights[i].colour * lightIntensity);
					
					////////////////////////////
					//// Calculate Specular ////
					////////////////////////////
					
						float firstDot = 2 * dot(normal_MapValue, directLights[i].direction.xyz);
						if(firstDot > 0.00000)
						{
							vec3 reflection = normalize(firstDot * normal_MapValue - directLights[i].direction.xyz);
					    
							float dotProduct = dot(reflection, normalize( vec4(viewMatrix * vec4(vec4(worldMatrix* vec4(rawPos_PS,1)).xyz - camPos, 0) ).xyz ));
							if(dotProduct < 0 ) dotProduct=0;
							
							float shine = 20; 
						
							specular += 2 * directLights[i].colour * specIntensity * max(pow(dotProduct, shine), 0);
						}

					
					////////////////////////////
					//// Calculate Specular ////
					////////////////////////////
					
				}

			/////////////////////////////////////////////////////////////////////////////////
			/////////////////////////////// Direct Light Code ///////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////
				
			/////////////////////////////////////////////////////////////////////////////////
			/////////////////////////////// Point Light Code ////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////		

				for(int i = 0; i < NOPOINTLIGHTS; ++i)
				{
					if( i >= pointLightsCount ) break;
					
					direction = vec4(vec4(worldMatrix* vec4(rawPos_PS,1)).xyz - pointLights[i].position, 0);
					direction = normalize(viewMatrix * direction);
					
					lightIntensity = clamp((dot(normal_MapValue, direction.xyz)), 0, 1);
					diffuseLighting += (pointLights[i].colour * lightIntensity);
					
					
					////////////////////////////
					//// Calculate Specular ////
					////////////////////////////
					
						float firstDot = 2 * dot(normal_MapValue, direction.xyz);
						if(firstDot > 0.00000)
						{
									
							vec3 reflection = normalize(firstDot * normal_MapValue - direction.xyz);
					    
							float dotProduct = dot(reflection, normalize( vec4(viewMatrix * vec4(vec4(worldMatrix* vec4(rawPos_PS,1)).xyz - camPos, 0) ).xyz ));
					    

							float shine = 10; 
						
							specular += 2 * pointLights[i].colour * specIntensity * max(pow(dotProduct, shine), 0);
						}

					
					////////////////////////////
					//// Calculate Specular ////
					////////////////////////////
					
				}
			/////////////////////////////////////////////////////////////////////////////////
			/////////////////////////////// Point Light Code ////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////	
			
		//////////////////
		//// Lighting ////
		//////////////////








		


		
		
		
		
		
		
		
		
		
		////////////////////////////
		//// CubeMap Reflection ////
		////////////////////////////
		
			vec3 ReflectionNormal_MapValue = texelFetch(normalMap, ivec2(tcoord_PS), 0).rgb - (0.5, 0.5, 0.5);
			
			ReflectionNormal_MapValue = normalize(worldNormal.xyz + (ReflectionNormal_MapValue.x * worldTangent.xyz + ReflectionNormal_MapValue.y * worldBinormal.xyz));
			
			if(normalToggle == 0)ReflectionNormal_MapValue = worldNormal.xyz;											//Toggle Using the normal map	
			
			
			
			


			vec4 VertexPosition = worldMatrix * vec4(rawPos_PS,1);
			vec3 ViewDirection = (camPos - VertexPosition.xyz);
			


			vec3 Reflection = reflect(-normalize(ViewDirection), ReflectionNormal_MapValue);
			vec4 cubeMapReflectionColour = texture(cubeMap, Reflection);


		////////////////////////////
		//// CubeMap Reflection ////
		////////////////////////////













		pixelColour = mix(cubeMapReflectionColour, vec4( textureColour * (diffuseLighting + ambientLight + specular), 1.0 ), environmentBlend);
		//pixelColour = vec4( textureColour * (diffuseLighting + ambientLight + specular), 1.0 );		
		
	}
}	

